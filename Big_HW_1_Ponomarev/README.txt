By Пономарев Николай Юрьевич from БПИ-234

Проект разделен на несколько логических частей:
1) Domain - описывает доменные объекты (BankAccount, Category, Operation), а также интерфейсы для взаимодействия.
2) Application – содержит логику работы с доменными объектами (фасады, команды, декораторы).
3) Infrastructure – хранение и ввод/вывод данных (репозитории, импорт/экспорт).
4) ConsoleApp – меню в консоли для взаимодействия с пользователем.
5) HSE_Bank_Tests – юнит-тесты.

Реализована доменная модель для создания, удаления, редактирования счетов, категорий и операций. Также предусмотрены некоторые аналитические функции: подсчет разницы доходов и расходов за всё время, группировка операций по типу (доход / расход), также для аналитических методов добавлен подсчёт времени выполнения.
И экспорт в .csv, .json и импорт файлов, которые создала программа.

Использованные паттерны:
1) Facade (файлы: AccountFacade.cs, CategoryFacade.cs, OperationFacade.cs, AnalyticsFacade.cs) – простой интерфейс для взаимодействия с группой классов.
2) Command (файлы: CreateAccountCommand.cs, UpdateOperationCommand.cs, DeleteCategoryCommand.cs) – обертка для запросов
3) Decorator (файл: ExecutionTimeDecorator.cs) – добавляет измерение времени выполнения.
4) Template Method (файлы: CsvDataImporter.cs, JsonDataImporter.cs) – шаблонный алгоритм импорта.
5) Visitor (файлы: CsvDataExporter.cs, JsonDataExporter.cs) – сепарация логики экспорта.
6) Factory (файл: DomainObjectFactory.cs) – упрощает создание объектов.

Был использован DI контейнер.

Инструкция по запуску приложения:

1) Перед добавлением операции нужно создать счет и категорию. Переход по меню осуществляется вводом нужных чисел.
2) Экспорт данных сохраняется в папку Exports в директории bin.
3) Импорт осуществляется из той же папки Exports, импортируются файлы, созданные самой программой.
