@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Order Creation</PageTitle>

<h1>Система заказов</h1>

<div class="card my-4">
    <div class="card-body">
        @if (!isConnected)
        {
            <h5 class="card-title">Подключение</h5>
            <div class="input-group">
                <input @bind="userId" class="form-control" placeholder="Введите ваш User ID" />
                <button class="btn btn-primary" @onclick="ConnectWebSocket" disabled="@isConnecting">
                    @if(isConnecting) {
                        <span class="spinner-border spinner-border-sm"></span>
                        <span> Connecting...</span>
                    } else {
                        <span>Подключиться</span>
                    }
                </button>
            </div>
        }
        else
        {
            <h5 class="card-title">Новый заказ (UserID: @userId)</h5>
            <div class="input-group">
                <span class="input-group-text">$</span>
                <input @bind="amount" type="number" class="form-control" placeholder="Сумма" />
                <button class="btn btn-success" @onclick="CreateOrder" disabled="@(amount <= 0)">Создать заказ</button>
            </div>
            <button class="btn btn-danger mt-3" @onclick="DisconnectWebSocket">Отключиться</button>
        }

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="mt-3 alert alert-info">@statusMessage</div>
        }
    </div>
</div>

@code {
    private string userId;
    private decimal amount;
    private System.Net.WebSockets.ClientWebSocket _socket;
    private CancellationTokenSource _cts;

    private bool isConnected;
    private bool isConnecting;
    private string statusMessage;

    private async Task ConnectWebSocket()
    {
        if (string.IsNullOrWhiteSpace(userId))
        {
            await JSRuntime.InvokeVoidAsync("showToastr", "error", "Пожалуйста, введите User ID.");
            return;
        }

        isConnecting = true;
        statusMessage = "Подключение к WebSocket...";

        _socket = new System.Net.WebSockets.ClientWebSocket();
        _cts = new CancellationTokenSource();

        var wsUri = new Uri($"ws://localhost:8000/ws?userId={userId}");

        try
        {
            await _socket.ConnectAsync(wsUri, _cts.Token);
            isConnected = true;
            isConnecting = false;
            statusMessage = $"Успешно подключено для пользователя {userId}.";
            await JSRuntime.InvokeVoidAsync("showToastr", "success", statusMessage);
            _ = ListenForMessages(_cts.Token);
        }
        catch (Exception ex)
        {
            isConnecting = false;
            statusMessage = $"Ошибка подключения: {ex.Message}";
            await JSRuntime.InvokeVoidAsync("showToastr", "error", statusMessage);
        }
    }

    private async Task ListenForMessages(CancellationToken token)
    {
        var buffer = new byte[4 * 1024];
        try
        {
            while (_socket.State == System.Net.WebSockets.WebSocketState.Open)
            {
                var result = await _socket.ReceiveAsync(new ArraySegment<byte>(buffer), token);
                if (result.MessageType == System.Net.WebSockets.WebSocketMessageType.Text)
                {
                    var message = System.Text.Encoding.UTF8.GetString(buffer, 0, result.Count);
                    await JSRuntime.InvokeVoidAsync("showToastr", "info", message);
                    StateHasChanged(); // Обновляем UI
                }
            }
        }
        catch (OperationCanceledException)
        {
            // Соединение было закрыто
        }
    }

    private async Task CreateOrder()
    {
        if (amount <= 0)
        {
            await JSRuntime.InvokeVoidAsync("showToastr", "error", "Сумма должна быть больше нуля.");
            return;
        }
        var url = $"http://localhost:8000/orders-api/Orders?userId={userId}&amount={amount.ToString(System.Globalization.CultureInfo.InvariantCulture)}";
        await Http.PostAsync(url, null);
    }

    private async Task DisconnectWebSocket()
    {
        if (_socket != null && _socket.State == System.Net.WebSockets.WebSocketState.Open)
        {
            _cts.Cancel();
            await _socket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus.NormalClosure, "Closing", CancellationToken.None);
        }
        isConnected = false;
        statusMessage = "Вы отключены.";
    }

    public async ValueTask DisposeAsync()
    {
        await DisconnectWebSocket();
        _socket?.Dispose();
        _cts?.Dispose();
    }
}