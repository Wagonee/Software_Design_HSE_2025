@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@using System.Net
@implements IAsyncDisposable

<PageTitle>Аккаунт и Заказы</PageTitle>

<div class="container mt-4">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-7">

            @if (_activeAccount == null)
            {
                <div class="card shadow-sm">
                    <div class="card-header bg-primary text-white">
                        <h4 class="my-0">Вход в систему</h4>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Вход или регистрация</h5>
                        <p class="card-text text-muted">Введите ваш UserID, чтобы найти существующий аккаунт или создать новый.</p>
                        <div class="input-group">
                            <input @bind="_userIdInput" class="form-control form-control-lg" placeholder="Например: user123" @onkeyup="HandleEnter" />
                            <button class="btn btn-outline-primary" type="button" @onclick="ConnectToAccount" disabled="@_isLoading">
                                <i class="bi bi-box-arrow-in-right"></i> Найти
                            </button>
                            <button class="btn btn-outline-success" type="button" @onclick="CreateNewAccount" disabled="@_isLoading">
                                <i class="bi bi-person-plus-fill"></i> Создать
                            </button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="card shadow-sm mb-4">
                    <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                        <h5 class="my-0">Аккаунт: <span class="fw-normal">@_activeAccount.UserId</span></h5>
                        <button class="btn btn-sm btn-light" @onclick="ChangeAccount">
                            <i class="bi bi-arrow-left-right"></i> Сменить
                        </button>
                    </div>
                    <div class="card-body">
                        <div class="text-center">
                            <h6 class="text-uppercase text-muted">Текущий баланс</h6>
                            <p class="display-4 fw-bold">@_activeAccount.Balance.ToString("C")</p>
                        </div>
                        <hr />
                        <h6 class="card-subtitle mb-2 text-muted">Пополнение баланса</h6>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input @bind="_depositAmount" type="number" class="form-control" placeholder="Сумма" min="0.01" step="0.01"/>
                            <button class="btn btn-success" @onclick="Deposit" disabled="@_isLoading">
                                <i class="bi bi-cash-coin"></i> Пополнить
                            </button>
                        </div>
                    </div>
                </div>

                <div class="card shadow-sm">
                    <div class="card-header">
                        <h5 class="my-0">Новый заказ</h5>
                    </div>
                    <div class="card-body">
                         <p class="card-text text-muted">Введите сумму и создайте новый заказ. Вы получите push-уведомление об изменении его статуса.</p>
                        <div class="input-group">
                            <span class="input-group-text">$</span>
                            <input @bind="_orderAmount" type="number" class="form-control" placeholder="Сумма заказа" min="0.01" step="0.01"/>
                            <button class="btn btn-primary" @onclick="CreateOrder" disabled="@_isLoading">
                                <i class="bi bi-cart-plus-fill"></i> Создать заказ
                            </button>
                        </div>
                    </div>
                </div>
            }

            @if (_isLoading)
            {
                <div class="progress mt-3">
                    <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 100%"></div>
                </div>
            }
            @if (!string.IsNullOrEmpty(_statusMessage))
            {
                <div class="alert @_statusClass mt-3 mb-0" role="alert">
                    @_statusMessage
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string _userIdInput;
    private AccountDto _activeAccount;
    private decimal _depositAmount;
    private decimal _orderAmount;
    private System.Net.WebSockets.ClientWebSocket _socket;
    private CancellationTokenSource _cts;
    private bool _isLoading;
    private string _statusMessage;
    private string _statusClass;

    private async Task ConnectToAccount()
    {
        await ProcessRequest(async () =>
        {
            var response = await Http.GetAsync($"/payments-api/accounts/{_userIdInput}/balance");
            if (response.IsSuccessStatusCode)
            {
                _activeAccount = await response.Content.ReadFromJsonAsync<AccountDto>();
                await InitializeWebSocket();
            }
            else
            {
                _statusMessage = $"Аккаунт для '{_userIdInput}' не найден.";
                _statusClass = "alert-warning";
            }
        });
    }

    private async Task CreateNewAccount()
    {
        await ProcessRequest(async () =>
        {
            var response = await Http.PostAsync($"/payments-api/accounts?userId={_userIdInput}", null);
            if (response.IsSuccessStatusCode)
            {
                _activeAccount = await response.Content.ReadFromJsonAsync<AccountDto>();
                _statusMessage = $"Аккаунт '{_userIdInput}' успешно создан!";
                _statusClass = "alert-success";
                await InitializeWebSocket();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _statusMessage = $"Ошибка: {error}";
                _statusClass = "alert-danger";
            }
        });
    }

    private async Task Deposit()
    {
        if (_depositAmount <= 0)
        {
            _statusMessage = "Сумма пополнения должна быть больше нуля.";
            _statusClass = "alert-danger";
            StateHasChanged();
            return;
        }
        await ProcessRequest(async () =>
        {
            var url = $"/payments-api/accounts/{_activeAccount.UserId}/deposit?amount={_depositAmount.ToString(System.Globalization.CultureInfo.InvariantCulture)}";
            var response = await Http.PostAsync(url, null);
            if (response.IsSuccessStatusCode)
            {
                var updatedAccount = await response.Content.ReadFromJsonAsync<AccountDto>();
                _activeAccount.Balance = updatedAccount.Balance;

                _statusMessage = "Баланс успешно пополнен!";
                _statusClass = "alert-success";
                _depositAmount = 0;
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                _statusMessage = $"Ошибка пополнения: {error}";
                _statusClass = "alert-danger";
            }
        }, false);
    }

    private async Task ChangeAccount()
    {
        await CloseWebSocket();
        _activeAccount = null;
        _userIdInput = string.Empty;
        _statusMessage = string.Empty;
    }

    private async Task CreateOrder()
    {
        if (_orderAmount <= 0)
        {
            _statusMessage = "Сумма заказа должна быть больше нуля.";
            _statusClass = "alert-danger";
            StateHasChanged();
            return;
        }
        await ProcessRequest(async () =>
        {
            var url = $"/orders-api/Orders?userId={_activeAccount.UserId}&amount={_orderAmount.ToString(System.Globalization.CultureInfo.InvariantCulture)}";
            var response = await Http.PostAsync(url, null);
            if (response.IsSuccessStatusCode)
            {
                _statusMessage = "Запрос на создание заказа успешно отправлен!";
                _statusClass = "alert-success";
                _orderAmount = 0;
            }
            else
            {
                _statusMessage = "Не удалось создать заказ. Проверьте баланс.";
                _statusClass = "alert-danger";
            }
        }, false);
    }

    private async Task InitializeWebSocket()
    {
        await CloseWebSocket();
        
        _socket = new System.Net.WebSockets.ClientWebSocket();
        _cts = new CancellationTokenSource();
        var wsUri = new UriBuilder("ws", "localhost", 8000, "ws") { Query = $"userId={_activeAccount.UserId}" }.Uri;

        try
        {
            await _socket.ConnectAsync(wsUri, _cts.Token);
            _ = Task.Run(() => ListenForMessages(_cts.Token));
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToastr", "error", $"Ошибка подключения к уведомлениям: {ex.Message}");
        }
    }

    private async Task ListenForMessages(CancellationToken token)
    {
        var buffer = new byte[4 * 1024];
        while (_socket?.State == System.Net.WebSockets.WebSocketState.Open && !token.IsCancellationRequested)
        {
            try
            {
                var result = await _socket.ReceiveAsync(new ArraySegment<byte>(buffer), token);
                if (result.MessageType == System.Net.WebSockets.WebSocketMessageType.Text)
                {
                    var message = System.Text.Encoding.UTF8.GetString(buffer, 0, result.Count);
                    try
                    {
                        var doc = System.Text.Json.JsonDocument.Parse(message);
                        if (doc.RootElement.TryGetProperty("Balance", out var balanceElement))
                        {
                            _activeAccount.Balance = balanceElement.GetDecimal();
                            StateHasChanged();
                        }
                        var text = doc.RootElement.TryGetProperty("Message", out var msgEl) ? msgEl.GetString() : message;
                        var status = doc.RootElement.TryGetProperty("Status", out var statusEl) ? statusEl.GetString() : null;
                        var type = status switch
                        {
                            "Paid" => "success",
                            "Failed" => "error",
                            _ => text.Contains("успешно", StringComparison.OrdinalIgnoreCase)
                                ? "success"
                                : (text.Contains("ошибк", StringComparison.OrdinalIgnoreCase) ||
                                   text.Contains("не удалось", StringComparison.OrdinalIgnoreCase))
                                    ? "error"
                                    : "info"
                        };
                        await JSRuntime.InvokeVoidAsync("showToastr", type, text);
                        
                        
                    }
                    catch (System.Text.Json.JsonException)
                    {
                        var type = message.Contains("успешно", StringComparison.OrdinalIgnoreCase)
                            ? "success"
                            : (message.Contains("ошибк", StringComparison.OrdinalIgnoreCase) ||
                               message.Contains("не удалось", StringComparison.OrdinalIgnoreCase))
                                ? "error"
                                : "info";
                        await JSRuntime.InvokeVoidAsync("showToastr", type, message);
                        
                    }
                }
            }
            catch (OperationCanceledException) { break; }
            catch (System.Net.WebSockets.WebSocketException) { break; }
        }
    }

    private async Task CloseWebSocket()
    {
        if (_socket?.State == System.Net.WebSockets.WebSocketState.Open)
        {
            _cts?.Cancel();
            await _socket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus.NormalClosure, "Closing", CancellationToken.None);
        }
        _socket?.Dispose();
        _cts?.Dispose();
        _socket = null;
        _cts = null;
    }

    public async ValueTask DisposeAsync() => await CloseWebSocket();

    private async Task HandleEnter(KeyboardEventArgs e) { if (e.Key == "Enter") await ConnectToAccount(); }
    
    private async Task ProcessRequest(Func<Task> action, bool clearStatus = true)
    {
        if (string.IsNullOrWhiteSpace(_userIdInput) && _activeAccount == null)
        {
            _statusMessage = "UserID не может быть пустым.";
            _statusClass = "alert-danger";
            StateHasChanged();
            return;
        }

        _isLoading = true;
        if (clearStatus)
        {
            _statusMessage = string.Empty;
        }
        StateHasChanged();

        try
        {
            await action();
        }
        catch (Exception ex)
        {
            _statusMessage = $"Произошла непредвиденная ошибка: {ex.Message}";
            _statusClass = "alert-danger";
        }

        _isLoading = false;
        StateHasChanged();
    }
}